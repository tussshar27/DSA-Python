1. arrays
--ordered means can be accessed using index , stores only single data type, mutable(changeable) , allow duplicates
--import package bc its not a built-in data structure.
import array as arr
a1 = arr.array(i,[1,2,3,4])
a1.append(5)  --only single element can be inserted at the end
a1.extend(6,7,8)  --to insert multiple elements at the end.
a1.insert(0,13)  --to insert at specific index.
print(a1)
print(type(a1))  --array list
o/p:
array(i,[13,2,3,4,5,6,7,8])

--nupmy package is used for creating multidimensional array.
import numpy as np
a2 = np.array([1,2,3], [4,5,6],[7,8,9])
print(a2)
print(type(a2))  --numpy array

2. lists  --can store multiple data types
--ordered means can be accessed using index , stores ony multiple data types , mutable , allow duplicates
--like array, no need to import any package.
--can be nested
l1 = [1,2,3,4,'Tushar',[5,6,7]]
print(l1)
print(len(l1))
l1.append(24)
l1.append([12,23,34])
l1.extend([2,3,4])
l1.insert(0,44)
print(l1)
o/p:
[44,2,3,4,'Tushar',[5,6,7],24,[12,23,34],2,3,4]
l1.remove(4)
o/p:
[44,2,3,'Tushar',[5,6,7],24,[12,23,34],2,3,4]
k = sorted(l1)
print(k)
o/p: sorted array will get formed.
for ind,val in enumerate(l1):
  print(ind,val)
o/p: enumerate is used to print value with its index number.
print(l1[1:4])
o/p:
[2,3,4]
print(l1[-1])
o/p:
[4]
print(l1[2:7:2])
o/p:
[3,'Tushar',24]

list = [1,2,3,4]
list2 = [1,2,3,4]
list.append([1,2])
list2.extend([1,2])
print(list)
print(list2)
o/p:
[1, 2, 3, 4, [1, 2]]
[1, 2, 3, 4, 1, 2]

3. Dictionary
--unordered i.e values can be accessed using keys and without using index , keys should be unique but values can be duplicate , mutable.
# NOTE: TO create dictionary, we use {} braces 
# while to access the value of a key, we use [] just like list.
d1 = {'k1':12,'k2':23,'k3':'Tushar','m1':92,4:'hello'}
print(d1)
{'k1':12,'k2':23,'k3':'Tushar','m1':92,4:'hello'}
print(d1['k1'])
12
#can also perform arithmetic operations
d1['k1'] = d1['k1']-12
o/p:
{0,....}
#can add list into dictionary
d2 = {'m1':23,'m2':43,'m3':[2,3,4]}
print(d2['m3'][0])
o/p:
2
#adding new key , value to existing dictionary.
d2['m4'] = ['a1','b1','c1']
print(d2)
o/p:
{'m1':23,'m2':43,'m3':[2,3,4],'m4':['a1','b1','c1']}
print(d2['m4'][0])
o/p:
a1
#creating new dictionary.
d3 ={}
d3[1] = 10
d3[2] = 20
d3[3] = 30
print(d3)
#nested dictionary
d4 = {1:10,2:20,3:30,4:{10:'hey',20:'hii'}}

#for in loop using dictionary:
for i in d4.keys():
  print(i)
o/p:
1
2
3
4
for j in d4.values():
  print(j)
o/p:
10
20
30
{10:'hey',20:'hii'}
for key,value in d4.items():
  print(f'key:{key} , value:{value})
o/p:
key:... , value:...
#to create dictionary copy
d5 = d4.copy()
#to clear dictionary
d4.clear()
#to get value from key
d4.get(1)
o/p:10
print(d4.items())
print(d4.keys())
print(d4.values())
#removing key and its value from dictionary
d4.pop(1)  --passing key
#to remove last key-value pair
d4.popitem()
#to update existing data
d4.update({2:24})

4. Sets
--unordered, only unique values are stored , can store multiple data types
#converting list to set
l1 = [1,2,2,2,3,3,4,4,4,6]
s1 = set(l1)
print(s1)
o/p:
{1,2,3,4,6}
#creating new set
s2 = set()
s2.add(10)
s2.add(20)
s2.add(30)
print(s2)
o/p:
{10,20,30}
#removing value
s2.remove(20)
print(s2)
o/p:
{10,30}

5. Tuple
--it is similar to list
--the main difference between both are, lists are changeable where as tuples are not.
t1 = (1,2,3,4,'tushar')
#to insert a new value in existing tuple, 
#there is only one way i.e to overwrite the tuple.
t1 = (23,45,67,"abfg",'Tushar','Annam')
t1
print(t1[0])
23

6. if ... elif ... else block
a=10
b=20
if(a<b):
  print(f'{a} is less than {b})
elif(a>b):
  print(f'{a} is greater than {b})
else:
  print(f'{a} is equal to {b})

7. while loop
a=1
while(a<5):
  print(a)
  a+=1
o/p:
1
2
3
4

7. 
list1 = ['tushar', 'aman', 'neo', 'pawan']
list2=[]
for i in list1:
  list2.append("Hello: " + i)
print(list2)

8. exception handling:
#try - except block
try:
  x = 1/0
except Exception as e:
  print(e)

try:
  x = 1/0
except ZeroDivisionError:
  print('divided by zero error occured.')
else:
  print('executed only when exception is not captured')
finally:
  print('it will execute mandatorily')

9. String
s1 = "Think Tank"
print(s1)
print(type(s1))
o/p:
Think Tank
<class 'str'>















