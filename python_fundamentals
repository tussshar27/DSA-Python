#python
#In Python, there is no Null instead we use None
#to increment variable, we can use n = n+1 or n += 1 but not n++
#we can use AND, && , OR , || operators.

#For loop with RANGE function
for n in range(5):    #it starts from 0 till 5 - 1, by default its increment
    print(n)            #o/p: 0,1,2,3,4
for n in range(2,6):
    print(n)            #o/p: 2,3,4,5
for n in range(5,1,-1):    # -1 indicates decrement
    print(n)            #o/p: 5,4,3,2
for n in range(7,1,-2):
    print(n)            #o/p: 7,5,3

#Division
print(5/2)            #o/p: 2.5
print(5//2)           #o/p: 2        #it rounds to 0

%Modular operator
print(10%3)            #o/p: 1 remainder

%math function
import math
print(math.sqrt(2))         #o/p: 1.4142135623730951
print(math.pow(2,3))        #o/p: 8.0
print(math.floor(3/2))        # 1
print(math.ceil(3/2))         # 2
print(3/2)                    #1.5


#Array
#arrays are also called list in python.
import array as arr
a1 = arr.array(i,[1,2,3,4])			#i means integer
a1.append(10)
a1.extend(20,30,40)
a1.insert(0,50)
print(a1)
o/p:
array(i,[1,2,3,4,10,20,30,40])

#numpy package is used to create multidimensional array
import numpy as np
a2 = np.array(i,[1,2,3,4],[5,6,7,8])
print(a2)

#array can be used as stack
#List
l1 = [1,2,3,'hey',5.24,[10,20,30]]
l1.append(54)
l1.append([4,5,6])					#append always consider a single value
l1.extend(7,8,9)
l1.insert(0,27)
print(len(l1))
print(l1)
l1.pop()                            #it will remove the last line=
[27,1,2,3,'hey',5.24,[10,20,30],54,[4,5,6],7,8]
l1.remove(54)						#pass value inside remove()
o/p:
[27,1,2,3,'hey',5.24,[10,20,30],[4,5,6],7,8,9]
#with index and value
for ind,val in enumerate(l1):                   #enumerate is used with list to give ouput of index and value both.
    print(ind,val)
o/p:
0 1
1 2
2 3
3 4.56
4 hello
5 [34, 45, 56]
#changing index
for ind,val in enumerate(l1,100):
    print(ind,val)
o/p:
100 1
200 2
300 3
400 4.56
500 hello
600 [34, 45, 56]
#enumerate for string
s1 = "geek"
for i in enumerate(s1):
    print(i)
o/p:
(0, 'g')
(1, 'e')
(2, 'e')
(3, 'k')
for i,j in enumerate(s1):
    print(i,j)
o/p:
0 g
1 e
2 e
3 k
print(l1[0:4])			#[1, 2, 3, 4.56]
print(l1[-1])			#9
num = [10,20,30,40,50]
#with index
for n in range(len(num)):
    print(n, num[n])               
o/p:
0 10
1 20
2 30
3 40
4 50
#without index
for n in num:
    print(n)  
o/p:
10
20
30
40
50
#loop through multiple arrays simultaneously.
num = [10,20,30,40,50]
num2 = [100,200,300,400,500]
for i,j in zip(num,num2):
    print(i,j)
o/p:
10 100
20 200
30 300
40 400
50 500
#reversing array
nums = [1,2,3]
nums.reverse()
print(nums)
o/p:
[3, 2, 1]
#Sorting array
#Ascending order
nums = [10,23,13]
nums.sort()
print(nums)
o/p:
[10, 13, 23]
#Descending order
nums.sort(reverse=True)
print(nums)
o/p:
[23, 13, 10]

#List Comprehension, we want to go through each element of range and add that element to an array.
num = [i for i in range(5)]
print(num)                #o/p: [0, 1, 2, 3, 4]

num = [i+i for i in range(5)]
print(num)                #o/p: [0, 2, 4, 6, 8]
#create list of arrays in range
num = [[1] * 2 for i in range(5)]
print(num)
o/p:
[[1, 1], [1, 1], [1, 1], [1, 1], [1, 1]]

#String, unchangeable-immutable
s = "abc"
print(s)
print(s[0])            # a
print(s[0:2])            # ab

#type casting, first it will typecast and to the operation
print(int("123") + int("123"))            # 246
print(str(123) + str(123))                # 123123

#print ASCII value of a character
print(ord('a'))                #97
print(ord('z'))                #122

#combining list of strings using .join method
str = ["abc","pqr","mno"]
print("".join(str))                #abcpqrmno
print("-".join(str))                #abc-pqr-mno

#Queue, follows First In First Out approach, consider normal customer queue
#there are three ways to implement queue: list, collections.deque, queue.Queue
#queue implementation using list O(N)
# Instead of enqueue() and dequeue(), append() and pop() functions are used.
queue = []
queue.append(1)
queue.append(2)
queue.append('c')
print(queue)
queue.pop(0)    #First Out
#queue.pop()     #it will remove the last element which is against of queue operation
print(queue)
o/p:
[1, 2, 'c']
[2, 'c']

#queue implementation using collections.deque O(1)
#deque is a class from the collections module
#Deque is preferred over list in the cases where we need quicker append and pop operations from both the ends of container.
# Instead of enqueue and deque, append() and popleft() functions are used
#The code uses a deque from the collections module to represent a queue
from collections import deque
q = deque()
q.append(1)
q.append(2)
q.append(3)        #1,2,3 queue is by default starts from left to right
print(q)
q.popleft()
print(q)
q.appendleft(5)    #we can also append queue from left
print(q)
q.pop()            #removing from right
print(q)
o/p:
deque([1, 2, 3])
deque([2, 3])
deque([5, 2, 3])
deque([5, 2])

#queue implementation using queue.Queue
maxsize – Number of items allowed in the queue.
empty() – Return True if the queue is empty, False otherwise.
full() – Return True if there are maxsize items in the queue. If the queue was initialized with maxsize=0 (the default), then full() never returns True.
get() – Remove and return an item from the queue. If queue is empty, wait until an item is available.
get_nowait() – Return an item if one is immediately available, else raise QueueEmpty.
put(item) – Put an item into the queue. If the queue is full, wait until a free slot is available before adding the item.
put_nowait(item) – Put an item into the queue without blocking. If no free slot is immediately available, raise QueueFull.
qsize() – Return the number of items in the queue.
from queue import Queue
q = Queue(maxsize = 3)
print(q.qsize()) 
q.put('a')
q.put('b')
q.put('c')
print("\nFull: ", q.full()) 
print("\nElements dequeued from the queue")
print(q.get())
print(q.get())
print(q.get())
print("\nEmpty: ", q.empty())
q.put(1)
print("\nEmpty: ", q.empty()) 
print("Full: ", q.full())
o/p:
0
Full:  True
Elements dequeued from the queue
a
b
c
Empty:  True
Empty:  False
Full:  False







#Dictionary/HashMap				#keys should be unique but values can be duplicate
# NOTE: TO create dictionary, we use {} braces 
# while to access the value of a key, we use [] just like list.
d1 = {1:10,2:20,'i':45,5:23,6:'xyz',7:[1,2,3]}
print(d1[2])				#20
print(d1)					#{1: 10, 2: 20, 'i': 45, 5: 23, 6: 'xyz',7:[1,2,3]}
d1[2] = d1[2]-10			#10
print(d1[7][0])				#1				#accessing the list present inside dictionary
d1[8] = ['a','b','c']		#appending new key and value to existing dictionary
print(d1)					#{1: 10, 2: 20, 'i': 45, 5: 23, 6: 'xyz', 7: [1, 2, 3], 8: ['a', 'b', 'c']}
print(d1[8][0])				#a
d2[5] = 100
d2[10] = 200
print(d2)					#{5: 100, 10: 200}
for i in d2.keys():
    print(i)
o/p:
5
10
for j in d2.values():
    print(j)
o/p:
100
200
for i,j in d2.items():
    print(i,j)
    print(f'keys:{i} and values:{j}')           
o/p:
5 100
10 200
keys:10 and values:200
print(d2)                           #{5: 100, 10: 200}
print(d2.get(5))                    #100
d3 = d2.copy()                      #copy of dictionary
d3.clear()                          #clear data of dictionary
print(d2.keys())                    #dict_keys([5, 10])
print(d2.values())                  #dict_values([100, 200])
print(d2.items())                   #dict_items([(5, 100), (10, 200)])
d2.pop(10)                          #passing key to remove key and its value
print(d2)                           #{5: 100}
d2.popitem()                        #it will remove last key and its value
print(d2)
d2.update({5:500})                  #updating key and its value
print(d2)                           #{5: 100}

#HashSet
#only unique values are stored.
s1 = set()
s1.add(10)
s1.add(29)
s1.add(34)
print(s1)                #{10, 34, 29}
print(len(s1))            #3
print(10 in s1)            #True
print(20 in s1)            #False
s1.remove(34)
print(s1)                #{10, 29}

l1 = [1,1,1,2,2,3,4,4,5]
s2 = set(l1)
print(s1)                           #{1, 2, 3, 4, 5}
s1.add(10)
s1.add(20)
s1.add(30)
print(s1)                           #{10, 20, 30}
s1.remove(20)
print(s1)                           #{10, 30}
#converting List to Set
print(set([1,1,2,3,3]))            # 1,2,3

#Set comprehension
hs = {i for i in range(5)}
print(hs)                            #{0, 1, 2, 3, 4}






#Tuple
#it is similar to list
#the main difference between both are, lists are changeable where as tuples are not.
t1 = (1,2,3,4,5.67,[1,2,3])
print(t1)                           #(1, 2, 3, 4, 5.67,[1,2,3])
#to insert a new value in existing tuple, 
#there is only one way i.e to overwrite the tuple.
t1 = (10,100,20,200,30,300,40)
print(t1)                           #(10,100,20,200,30,300,40)

#if .. elif .. else block
a=10
b=20
if(a>b):
    print(f'{a} is greater than {b}')
elif(a<b):
    print(f'{a} is smaller than {b}')
else:
    print(f'{a} is equal to {b}')
o/p:
10 is smaller than 20

#while loop
a=1
while(a<5):
    print(a)
    a+=1
o/p:
1
2
3
4

l1 = ['hey','hii','hello']
for i in l1:
    print(f'{i} Tushar')
o/p:
hey Tushar
hii Tushar
hello Tushar

#Exception handling
#try - except block
#example1:
try:
    a = 10/0
except Exception as e:
    print(e)
o/p:
division by zero

#example2:
try:
    a = 10/0
except Exception as e:
    print(e)
else:
    print('executed when there is no error')
finally:
    print('it will execute mandatorily')
o/p:
division by zero
it will execute mandatorily




























