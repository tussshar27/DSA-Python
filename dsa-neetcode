1. Contains Duplicate
Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
->
There are three ways to solve this question using bruteforce method which compare each value with every other value O(Nsquare), second is to sort array and compare only the neighbor value to check if there is any duplicate O(nlogn) eg. 1,2,3,4,1 -> sort -> 1,1,2,3,4 and third is to insert in hashset set(), since hashset stores only unique values so if there is any duplicate which we want to insert then it will not insert in hashset Time: O(N) and Space: O(N).

def duplicates(num):
    h1 = set()
    for i in num:
        if i in h1:
            return True
        h1.add(i)
    return False


num = [1,2,3,4,1]
print(duplicates(num))
output:
True

=== Code Execution Successful ===
    
2. Valid Anagram
#anagram
from collections import Counter
s = "carr"
t = "racr"

def anagram(s,t):
    if len(s) != len(t):
        return False
    #3 ways to solve:
    #1. using Counter()
    # return Counter(s) == Counter(t)
    
    #2. using sorted()
    # return sorted(s) == sorted(t)
    
    #3. using hashmap/dictionary
    #converting strings into dictionary with value.
    s1 , t1 = {}, {}
    for i in range(len(s)):     #can be any, s or t
        # s1[s[i]] = 1 + s1.get(s[i],0)      #to store the count
        # t1[t[i]] = 1 + t1.get(t[i],0)

    print(s1)
    print(t1)
    for j in s1:        #by default j is considered as key
        if s1[j] != t1.get(j):
            return False
    return True
        
print(anagram(s,t))
output:
{'c': 1, 'a': 1, 'r': 2}
{'r': 2, 'a': 1, 'c': 1}
True

=== Code Execution Successful ===

3. Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1]

#using bruteforce
we will compare each element with its all right elements. Time Complexity: O(Nsquare). since we are running two nested loops.

def twoSum(nums, target):
    l1 = []
    for i in range(len(nums)):
        if nums[i] == target:
            l1.append(i)
        if nums[i] < target:
            for j in range(i+1, len(nums)):
                if abs(nums[i])+abs(nums[j]) == target:
                    l1.extend([i,j])
    print(l1)

twoSum([-1,-2,-3,-4,-5],8)
output:
[2, 4]

#using hashmap
Eg. arr = [1,5,8,3], target = 4. Now we have to check the sum of elements up to 4. so we will first check whether the current element (1) is less than target. If yes then do substraction (4 - 1 = 3). so now we have to find (3) is present or not. So we don't have to check every number, we just have to check whether (3) exists or not.
In Hashmap, we will be mapping each value to the index. val:index; so 0->1, 1->5, 2->8, 3->3
time complexity: O(N) bc we are looping just one time and inserting in dictionary which is O(1) that is ignorable and space: O(N) bc we are using hashmap so its taking extra space.
l1 = [1, 5, 8, 6, 3, 10]
target = 4
def myfunc(l1,target):
  prevHash = {}    #to store iterated values from left
  for index,value in enumerate(l1):
    # print(index,value)
    diff = target - value     # 3 = 4 - 1
    if diff in prevHash:      
      print(prevHash[diff],index)  
    prevHash[value] = index   #prevHash[1] = 0
  print(prevHash)
print(myfunc(l1,target))
output:
0 4
{1: 0, 5: 1, 8: 2, 6: 3, 3: 4, 10: 5}

4. Group Anagram
from collections import defaultdict
from typing import List
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        dic = defaultdict(list)
        for word in strs:
            lst = [0] * 26
            for char in word:
                lst[ord(char) - ord('a')] += 1  #if char='a' then the value will be 1
            lst = tuple(lst)
            dic[lst].append(word)
        return dic.values()
obj = Solution()
strs = ["eat","tea","tan","ate","nat","bat"]
print(obj.groupAnagrams(strs))

output:
dict_values([['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']])











