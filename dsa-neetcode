1. Contains Duplicate
Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.
->
There are three ways to solve this question using bruteforce method which compare each value with every other value O(Nsquare), second is to sort array and compare only the neighbor value to check if there is any duplicate O(nlogn) eg. 1,2,3,4,1 -> sort -> 1,1,2,3,4 and third is to insert in hashset set(), since hashset stores only unique values so if there is any duplicate which we want to insert then it will not insert in hashset Time: O(N) and Space: O(N).

def duplicates(num):
    h1 = set()
    for i in num:
        if i in h1:
            return True
        h1.add(i)
    return False


num = [1,2,3,4,1]
print(duplicates(num))
output:
True

=== Code Execution Successful ===
    
2. Valid Anagram
#anagram
from collections import Counter
s = "carr"
t = "racr"

def anagram(s,t):
    if len(s) != len(t):
        return False
    #3 ways to solve:
    #1. using Counter()
    # return Counter(s) == Counter(t)
    
    #2. using sorted()
    # return sorted(s) == sorted(t)
    
    #3. using hashmap/dictionary
    #converting strings into dictionary with value.
    s1 , t1 = {}, {}
    for i in range(len(s)):     #can be any, s or t
        # s1[s[i]] = 1 + s1.get(s[i],0)      #to store the count
        # t1[t[i]] = 1 + t1.get(t[i],0)

    print(s1)
    print(t1)
    for j in s1:        #by default j is considered as key
        if s1[j] != t1.get(j):
            return False
    return True
        
print(anagram(s,t))
output:
{'c': 1, 'a': 1, 'r': 2}
{'r': 2, 'a': 1, 'c': 1}
True

=== Code Execution Successful ===

3. Two Sum
#using bruteforce
def twoSum(nums, target):
    l1 = []
    for i in range(len(nums)):
        if nums[i] == target:
            l1.append(i)
        if nums[i] < target:
            for j in range(i+1, len(nums)):
                if abs(nums[i])+abs(nums[j]) == target:
                    l1.extend([i,j])
    print(l1)

twoSum([-1,-2,-3,-4,-5],8)
output:
[2, 4]

=== Code Execution Successful ===
#using hashmap time: O(N) bc we are looping just one time and inserting in dictionary which is O(1) that is ignorable and space: O(N) bc we are using hashmap so its taking extra space.
class Solution:
    # eg list: [2,7,11,15], target: 9
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hm = {}     #created hashmap to store each iterated value of list
        for k,v in enumerate(nums):     #key,value
            d = target - v          #difference of target and value
            if d in hm:             #if difference is present in hashmap
                return [hm[d],k]    #print index of difference, and key
            hm[v] = k   #eg 2:0
output:
[0,1]











